# OpenTelemetry setup for {{.ServiceName}} (Java)

## Maven

Add to pom.xml dependencies:

```xml
<dependency>
  <groupId>io.opentelemetry</groupId>
  <artifactId>opentelemetry-api</artifactId>
</dependency>
<dependency>
  <groupId>io.opentelemetry</groupId>
  <artifactId>opentelemetry-sdk</artifactId>
</dependency>
<dependency>
  <groupId>io.opentelemetry</groupId>
  <artifactId>opentelemetry-exporter-otlp</artifactId>
</dependency>
```

## Gradle

```groovy
dependencies {
  implementation 'io.opentelemetry:opentelemetry-api'
  implementation 'io.opentelemetry:opentelemetry-sdk'
  implementation 'io.opentelemetry:opentelemetry-exporter-otlp'
}
```

## Initialize OpenTelemetry in your main method

```java
import io.opentelemetry.api.GlobalOpenTelemetry;
import io.opentelemetry.api.trace.Tracer;
import io.opentelemetry.exporter.otlp.trace.OtlpGrpcSpanExporter;
import io.opentelemetry.sdk.trace.SdkTracerProvider;
import io.opentelemetry.sdk.trace.export.BatchSpanProcessor;
import io.opentelemetry.sdk.resources.Resource;
import static io.opentelemetry.semconv.ResourceAttributes.SERVICE_NAME;

public class OtelInit {
  public static void init() {
    OtlpGrpcSpanExporter exporter = OtlpGrpcSpanExporter.builder().build();
    SdkTracerProvider provider = SdkTracerProvider.builder()
      .addSpanProcessor(BatchSpanProcessor.builder(exporter).build())
      .setResource(Resource.getDefault().toBuilder().put(SERVICE_NAME, "{{.ServiceName}}").build())
      .build();
    // You can set GlobalOpenTelemetry if needed via OpenTelemetrySdk
  }
}
```


