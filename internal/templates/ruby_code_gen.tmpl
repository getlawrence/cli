#!/usr/bin/env ruby
# OpenTelemetry instrumentation for {{.ServiceName}}

require 'opentelemetry-api'
require 'opentelemetry-sdk'
require 'opentelemetry-exporter-otlp'
{{range .Instrumentations}}
require 'opentelemetry-instrumentation-{{.}}'
{{end}}

# Resolve exporter endpoint from env and ensure /v1/traces suffix
base = ENV.fetch('OTEL_EXPORTER_OTLP_ENDPOINT', '{{if .TraceEndpoint}}{{.TraceEndpoint}}{{else}}http://localhost:4318{{end}}')
if base && !base.empty?
  base = base.sub(%r{/*$}, '')
  OTEL_EXPORTER_OTLP_ENDPOINT = base + '/v1/traces'
else
  OTEL_EXPORTER_OTLP_ENDPOINT = 'http://localhost:4318/v1/traces'
end

OpenTelemetry::SDK.configure do |c|
  c.service_name = '{{.ServiceName}}'

  # Exporter
  c.add_span_processor(
    OpenTelemetry::SDK::Trace::Export::BatchSpanProcessor.new(
      OpenTelemetry::Exporter::OTLP::Exporter.new(
        endpoint: OTEL_EXPORTER_OTLP_ENDPOINT
      )
    )
  )

  # Propagators
  propagators = ['tracecontext', 'baggage']
  {{- if .Propagators }}
  propagators |= {{ printf "%#v" .Propagators }}
  {{- end }}
  OpenTelemetry.propagation = OpenTelemetry::Context::Propagation.build(propagators)

  # Instrumentations
  {{range .Instrumentations}}
  c.use 'OpenTelemetry::Instrumentation::{{.}}'
  {{end}}
end

# Emit a bootstrap span
tracer = OpenTelemetry.tracer_provider.tracer('bootstrap')
tracer.in_span('startup') {}


