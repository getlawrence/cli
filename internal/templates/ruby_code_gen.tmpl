#!/usr/bin/env ruby
# OpenTelemetry instrumentation for {{.ServiceName}}

require 'opentelemetry-api'
require 'opentelemetry-sdk'
require 'opentelemetry-exporter-otlp'
{{range .Instrumentations}}
require 'opentelemetry-instrumentation-{{.}}'
{{end}}

# Resolve exporter endpoints and ensure proper suffixes
base = ENV.fetch('OTEL_EXPORTER_OTLP_ENDPOINT', '{{if .TraceEndpoint}}{{.TraceEndpoint}}{{else}}http://localhost:4318{{end}}')
base = (base || '').sub(%r{/*$}, '')
TRACES_ENDPOINT = (base.empty? ? 'http://localhost:4318' : base) + '/v1/traces'
METRICS_ENDPOINT = (base.empty? ? 'http://localhost:4318' : base) + '/v1/metrics'

# Ensure env is aligned for HTTP/protobuf OTLP
ENV['OTEL_SERVICE_NAME'] ||= '{{.ServiceName}}'
ENV['OTEL_TRACES_EXPORTER'] ||= 'otlp'
ENV['OTEL_EXPORTER_OTLP_TRACES_PROTOCOL'] ||= 'http/protobuf'
ENV['OTEL_EXPORTER_OTLP_TRACES_ENDPOINT'] ||= TRACES_ENDPOINT

OpenTelemetry::SDK.configure do |c|
  c.service_name = ENV['OTEL_SERVICE_NAME'] || '{{.ServiceName}}'

  # Exporter
  begin
    c.add_span_processor(
      OpenTelemetry::SDK::Trace::Export::BatchSpanProcessor.new(
        OpenTelemetry::Exporter::OTLP::Exporter.new(
          endpoint: TRACES_ENDPOINT
        )
      )
    )
  rescue => e
    warn "failed to configure OTLP exporter: #{e.message}"
  end


  # Instrumentations
  {{range .Instrumentations}}
  c.use 'OpenTelemetry::Instrumentation::{{.}}'
  {{end}}

  # Optional: configure metrics via env (OTel Ruby supports metrics via SDK env config in recent versions)
end

begin
  # Emit a bootstrap span
  tracer = OpenTelemetry.tracer_provider.tracer('bootstrap')
  tracer.in_span('startup') {}
rescue StandardError => e
  warn "OTEL bootstrap failed: #{e.message}"
end


