# OpenTelemetry Instrumentation for {{.ServiceName}}

## Add the following dependencies to your go.mod:

```bash
go get go.opentelemetry.io/otel
go get go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp
go get go.opentelemetry.io/otel/sdk
{{range .Instrumentations}}
{{if eq . "otelhttp"}}go get go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp{{end}}
{{if eq . "otelgin"}}go get go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin{{end}}
{{if eq . "otelmux"}}go get go.opentelemetry.io/contrib/instrumentation/github.com/gorilla/mux/otelmux{{end}}
{{if eq . "otelsql"}}go get go.opentelemetry.io/contrib/instrumentation/database/sql/otelsql{{end}}
{{end}}
```

## Initialize OpenTelemetry in your main function:

```go
func initTracer() {
    exporter, err := otlptracehttp.New(context.Background())
    if err != nil {
        log.Fatal(err)
    }

    tp := trace.NewTracerProvider(
        trace.WithBatcher(exporter),
        trace.WithResource(resource.NewWithAttributes(
            semconv.SchemaURL,
            semconv.ServiceNameKey.String("{{.ServiceName}}"),
        )),
    )

    otel.SetTracerProvider(tp)
}
```

## Add instrumentation to your handlers:

{{range .Instrumentations}}
{{if eq . "otelhttp"}}
```go
// Wrap your HTTP handlers
handler := otelhttp.NewHandler(http.HandlerFunc(yourHandler), "operation_name")
```
{{end}}
{{if eq . "otelgin"}}
```go
// Add to your Gin router
router.Use(otelgin.Middleware("{{$.ServiceName}}"))
```
{{end}}
{{if eq . "otelmux"}}
```go
// Add to your Gorilla Mux router
router.Use(otelmux.Middleware("{{$.ServiceName}}"))
```
{{end}}
{{if eq . "otelsql"}}
```go
// Wrap your SQL driver
db, err := otelsql.Open("postgres", dsn, otelsql.WithAttributes(
    semconv.DBSystemPostgreSQL,
))
```
{{end}}
{{end}}
