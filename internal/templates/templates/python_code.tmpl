# OpenTelemetry Instrumentation for {{.ServiceName}} (Python)

## Install the required packages:

```bash
{{range .Instrumentations}}
{{if eq . "flask"}}pip install opentelemetry-instrumentation-flask{{end}}
{{if eq . "django"}}pip install opentelemetry-instrumentation-django{{end}}
{{if eq . "requests"}}pip install opentelemetry-instrumentation-requests{{end}}
{{if eq . "psycopg2"}}pip install opentelemetry-instrumentation-psycopg2{{end}}
{{end}}
pip install opentelemetry-api
pip install opentelemetry-sdk
pip install opentelemetry-exporter-otlp
```

## Initialize OpenTelemetry in your application:

```python
from opentelemetry import trace
from opentelemetry.exporter.otlp.proto.http.trace_exporter import OTLPSpanExporter
from opentelemetry.sdk.trace import TracerProvider
from opentelemetry.sdk.trace.export import BatchSpanProcessor
from opentelemetry.sdk.resources import Resource

# Configure tracing
resource = Resource.create({"service.name": "{{.ServiceName}}"})
trace.set_tracer_provider(TracerProvider(resource=resource))

otlp_exporter = OTLPSpanExporter()
span_processor = BatchSpanProcessor(otlp_exporter)
trace.get_tracer_provider().add_span_processor(span_processor)

{{range .Instrumentations}}
{{if eq . "flask"}}
# Flask instrumentation
from opentelemetry.instrumentation.flask import FlaskInstrumentor
FlaskInstrumentor().instrument_app(app)
{{end}}
{{if eq . "django"}}
# Django instrumentation
from opentelemetry.instrumentation.django import DjangoInstrumentor
DjangoInstrumentor().instrument()
{{end}}
{{if eq . "requests"}}
# Requests instrumentation
from opentelemetry.instrumentation.requests import RequestsInstrumentor
RequestsInstrumentor().instrument()
{{end}}
{{end}}
```
