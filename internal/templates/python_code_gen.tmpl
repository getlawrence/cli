"""
OpenTelemetry instrumentation for {{.ServiceName}}
"""

import os
import logging
from typing import Optional

from opentelemetry import trace
from opentelemetry.exporter.otlp.proto.http.trace_exporter import OTLPSpanExporter
from opentelemetry.sdk.trace import TracerProvider
from opentelemetry.sdk.trace.export import BatchSpanProcessor
from opentelemetry.sdk.trace.sampling import AlwaysOnSampler, AlwaysOffSampler, TraceIdRatioBased
from opentelemetry.sdk.resources import Resource
from opentelemetry.semconv.resource import ResourceAttributes
from opentelemetry.propagate import set_global_textmap
from opentelemetry.propagators.composite import CompositePropagator
from opentelemetry.propagators.tracecontext import TraceContextTextMapPropagator
from opentelemetry.propagators.baggage import BaggagePropagator
{{range .Instrumentations}}
from opentelemetry.instrumentation.{{.}} import {{.}}Instrumentor
{{end}}

logger = logging.getLogger(__name__)


def init_tracer() -> Optional[TracerProvider]:
    """Initialize OpenTelemetry tracing for {{.ServiceName}}"""
    
    # Create resource
    resource = Resource.create({
        ResourceAttributes.SERVICE_NAME: os.getenv("OTEL_SERVICE_NAME", "{{.ServiceName}}"),
        ResourceAttributes.SERVICE_VERSION: os.getenv("OTEL_SERVICE_VERSION", "1.0.0"),
        ResourceAttributes.DEPLOYMENT_ENVIRONMENT: os.getenv("OTEL_DEPLOYMENT_ENVIRONMENT", "development"),
    })
    
    # Sampler
    sampler = AlwaysOnSampler()
    {{- if .SamplerType }}
    {{- if eq .SamplerType "always_off" }}
    sampler = AlwaysOffSampler()
    {{- else if eq .SamplerType "traceidratio" }}
    sampler = TraceIdRatioBased({{if gt .SamplerRatio 0.0}}{{.SamplerRatio}}{{else}}1.0{{end}})
    {{- end }}
    {{- end }}

    # Create tracer provider
    tracer_provider = TracerProvider(resource=resource, sampler=sampler)
    
    # Create OTLP exporter
    default_endpoint = "{{if .TraceEndpoint}}{{.TraceEndpoint}}{{else}}http://localhost:4318{{end}}"
    base_endpoint = os.getenv("OTEL_EXPORTER_OTLP_ENDPOINT", default_endpoint)
    endpoint = base_endpoint if base_endpoint.endswith("/v1/traces") else base_endpoint.rstrip("/") + "/v1/traces"
    try:
        otlp_exporter = OTLPSpanExporter(endpoint=endpoint)
        span_processor = BatchSpanProcessor(otlp_exporter)
        tracer_provider.add_span_processor(span_processor)
    except Exception as e:
        logger.error(f"Failed to create OTLP exporter: {e}")
        return None
    
    # Set global tracer provider
    trace.set_tracer_provider(tracer_provider)

    # Propagators
    propagators = [TraceContextTextMapPropagator(), BaggagePropagator()]
    {{- if .Propagators }}
    try:
        from opentelemetry.propagators.b3 import B3MultiFormat, B3Format
        for p in {{printf "%#v" .Propagators}}:
            if p == "b3":
                propagators.append(B3Format())
            elif p == "b3multi":
                propagators.append(B3MultiFormat())
    except Exception:
        pass
    {{- end }}
    set_global_textmap(CompositePropagator(propagators))
    
    # Initialize instrumentations
    try:
        {{range .Instrumentations}}
        try:
            {{.}}Instrumentor().instrument()
        except Exception as e:
            logger.warning(f"Failed to initialize instrumentation '{{.}}': {e}")
        {{end}}
        logger.info("Successfully initialized OpenTelemetry instrumentations")
    except Exception as e:
        logger.error(f"Failed to initialize instrumentations: {e}")
    
    # Emit a bootstrap span to verify pipeline
    tracer = trace.get_tracer("bootstrap")
    with tracer.start_as_current_span("startup"):
        pass

    return tracer_provider


def get_tracer() -> trace.Tracer:
    """Get a tracer for the service"""
    return trace.get_tracer("{{.ServiceName}}")


def shutdown_tracing():
    """Shutdown tracing and flush any remaining spans"""
    try:
        provider = trace.get_tracer_provider()
        if hasattr(provider, 'shutdown'):
            provider.shutdown()
        logger.info("OpenTelemetry tracing shutdown complete")
    except Exception as e:
        logger.error(f"Error during tracing shutdown: {e}")


# Initialize tracing when module is imported
tracer_provider = init_tracer()
if not tracer_provider:
    logger.warning("Failed to initialize OpenTelemetry tracing")
