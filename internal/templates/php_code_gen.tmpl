<?php
// Generated by Lawrence CLI - OpenTelemetry setup for PHP (template-based)

declare(strict_types=1);

// This file provides a simple function to initialize OpenTelemetry SDK for PHP

function setup_otel(): void {
    // You may need to install packages via Composer:
    // composer require open-telemetry/opentelemetry
    // composer require open-telemetry/exporter-otlp

    // Minimal OTLP HTTP tracing setup
    try {
        $endpoint = getenv('OTEL_EXPORTER_OTLP_ENDPOINT') ?: '{{if .TraceEndpoint}}{{.TraceEndpoint}}{{else}}http://localhost:4318{{end}}';
        if (!str_ends_with($endpoint, '/v1/traces')) {
            $endpoint = rtrim($endpoint, '/') . '/v1/traces';
        }

        $resource = \OpenTelemetry\SDK\Resource\ResourceInfo::create(\OpenTelemetry\SDK\Resource\Detectors\EnvironmentVariables::detect()->getAttributes()->merge(
            new \OpenTelemetry\SDK\Resource\Attributes([
                'service.name' => '{{.ServiceName}}'
            ])
        ));

        $exporter = new \OpenTelemetry\Contrib\Otlp\SpanExporter($endpoint);
        $spanProcessor = new \OpenTelemetry\SDK\Trace\SpanProcessor\BatchSpanProcessor($exporter);
        $tracerProvider = new \OpenTelemetry\SDK\Trace\TracerProvider($spanProcessor, null, $resource);
        \OpenTelemetry\API\Globals::setTracerProvider($tracerProvider);

        // Emit a bootstrap span
        $tracer = \OpenTelemetry\API\Trace\Globals::tracerProvider()->getTracer('bootstrap');
        $span = $tracer->spanBuilder('startup')->startSpan();
        $span->end();
    } catch (\Throwable $e) {
        error_log('Failed to initialize OpenTelemetry: ' . $e->getMessage());
    }
}


