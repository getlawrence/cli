# OpenTelemetry Instrumentation Implementation for {{.ServiceName}}

## Overview
Implement comprehensive OpenTelemetry instrumentation for this Python project. This includes setting up tracing, installing required packages, and integrating instrumentations for detected frameworks.

## Implementation Tasks

### 1. Install Required Packages

Install all OpenTelemetry packages in one go:

```bash
# Core OpenTelemetry packages
pip install opentelemetry-api opentelemetry-sdk opentelemetry-exporter-otlp

# Instrumentation packages for detected frameworks
{{range .Instrumentations}}
{{if eq . "flask"}}pip install opentelemetry-instrumentation-flask{{end}}
{{if eq . "django"}}pip install opentelemetry-instrumentation-django{{end}}
{{if eq . "requests"}}pip install opentelemetry-instrumentation-requests{{end}}
{{if eq . "psycopg2"}}pip install opentelemetry-instrumentation-psycopg2{{end}}
{{if eq . "pymongo"}}pip install opentelemetry-instrumentation-pymongo{{end}}
{{if eq . "redis"}}pip install opentelemetry-instrumentation-redis{{end}}
{{if eq . "sqlalchemy"}}pip install opentelemetry-instrumentation-sqlalchemy{{end}}
{{if eq . "fastapi"}}pip install opentelemetry-instrumentation-fastapi{{end}}
{{end}}
```

### 2. Create OpenTelemetry Configuration Module

Create a new file `telemetry/opentelemetry_config.py` (or follow the project's existing structure for configuration modules):

```python
"""
OpenTelemetry configuration and initialization for {{.ServiceName}}.
This module sets up tracing and auto-instrumentation for detected frameworks.
"""

import os
from opentelemetry import trace
from opentelemetry.exporter.otlp.proto.http.trace_exporter import OTLPSpanExporter
from opentelemetry.sdk.trace import TracerProvider
from opentelemetry.sdk.trace.export import BatchSpanProcessor
from opentelemetry.sdk.resources import Resource
from opentelemetry.semconv.resource import ResourceAttributes

# Auto-instrumentation imports
{{range .Instrumentations}}
{{if eq . "flask"}}from opentelemetry.instrumentation.flask import FlaskInstrumentor{{end}}
{{if eq . "django"}}from opentelemetry.instrumentation.django import DjangoInstrumentor{{end}}
{{if eq . "requests"}}from opentelemetry.instrumentation.requests import RequestsInstrumentor{{end}}
{{if eq . "psycopg2"}}from opentelemetry.instrumentation.psycopg2 import Psycopg2Instrumentor{{end}}
{{if eq . "pymongo"}}from opentelemetry.instrumentation.pymongo import PymongoInstrumentor{{end}}
{{if eq . "redis"}}from opentelemetry.instrumentation.redis import RedisInstrumentor{{end}}
{{if eq . "sqlalchemy"}}from opentelemetry.instrumentation.sqlalchemy import SQLAlchemyInstrumentor{{end}}
{{if eq . "fastapi"}}from opentelemetry.instrumentation.fastapi import FastAPIInstrumentor{{end}}
{{end}}


def configure_opentelemetry():
    """
    Configure OpenTelemetry tracing with OTLP exporter and auto-instrumentation.
    Call this function early in your application startup process.
    """
    
    # Configure resource with service information
    resource = Resource.create({
        ResourceAttributes.SERVICE_NAME: "{{.ServiceName}}",
        ResourceAttributes.SERVICE_VERSION: os.getenv("SERVICE_VERSION", "1.0.0"),
        ResourceAttributes.DEPLOYMENT_ENVIRONMENT: os.getenv("ENVIRONMENT", "development"),
    })
    
    # Set up trace provider
    trace.set_tracer_provider(TracerProvider(resource=resource))
    tracer_provider = trace.get_tracer_provider()
    
    # Configure OTLP exporter
    otlp_exporter = OTLPSpanExporter(
        endpoint=os.getenv("OTEL_EXPORTER_OTLP_TRACES_ENDPOINT", "http://localhost:4318/v1/traces"),
        headers={"Authorization": f"Bearer {os.getenv('OTEL_API_KEY', '')}"} if os.getenv('OTEL_API_KEY') else None
    )
    
    # Add span processor
    span_processor = BatchSpanProcessor(otlp_exporter)
    tracer_provider.add_span_processor(span_processor)
    
    # Initialize auto-instrumentation for detected frameworks
    _initialize_instrumentations()


def _initialize_instrumentations():
    """Initialize all detected framework instrumentations."""
    
{{range .Instrumentations}}
{{if eq . "requests"}}    # Requests instrumentation (HTTP client)
    RequestsInstrumentor().instrument()
{{end}}
{{if eq . "psycopg2"}}    # PostgreSQL instrumentation
    Psycopg2Instrumentor().instrument()
{{end}}
{{if eq . "pymongo"}}    # MongoDB instrumentation
    PymongoInstrumentor().instrument()
{{end}}
{{if eq . "redis"}}    # Redis instrumentation
    RedisInstrumentor().instrument()
{{end}}
{{if eq . "sqlalchemy"}}    # SQLAlchemy instrumentation
    SQLAlchemyInstrumentor().instrument()
{{end}}
{{end}}


{{range .Instrumentations}}
{{if eq . "flask"}}
def instrument_flask_app(app):
    """
    Instrument a Flask application with OpenTelemetry.
    Call this function after creating your Flask app instance.
    
    Args:
        app: Flask application instance
        
    Returns:
        Instrumented Flask app
    """
    FlaskInstrumentor().instrument_app(app)
    return app
{{end}}
{{if eq . "django"}}
def instrument_django():
    """
    Instrument Django with OpenTelemetry.
    Call this function in your Django settings.py or early in the application lifecycle.
    """
    DjangoInstrumentor().instrument()
{{end}}
{{if eq . "fastapi"}}
def instrument_fastapi_app(app):
    """
    Instrument a FastAPI application with OpenTelemetry.
    Call this function after creating your FastAPI app instance.
    
    Args:
        app: FastAPI application instance
        
    Returns:
        Instrumented FastAPI app
    """
    FastAPIInstrumentor.instrument_app(app)
    return app
{{end}}
{{end}}


# Create tracer instance for manual instrumentation
tracer = trace.get_tracer(__name__)


def get_tracer():
    """Get a tracer instance for manual instrumentation."""
    return tracer

```

### 3. Integration Instructions

{{range .Instrumentations}}
{{if eq . "flask"}}
#### Flask Integration

Find your Flask app creation code (usually in `app.py`, `main.py`, or `__init__.py`) and modify it:

```python
from flask import Flask
from telemetry.opentelemetry_config import configure_opentelemetry, instrument_flask_app

# Initialize OpenTelemetry first
configure_opentelemetry()

# Create Flask app
app = Flask(__name__)

# Instrument the Flask app
app = instrument_flask_app(app)

# Your existing routes and configuration...
```
{{end}}
{{if eq . "django"}}
#### Django Integration

Modify your Django `settings.py` file to include OpenTelemetry initialization:

```python
# Add this at the end of settings.py
from telemetry.opentelemetry_config import configure_opentelemetry, instrument_django

# Initialize OpenTelemetry
configure_opentelemetry()
instrument_django()
```

Alternatively, you can add it to your `__init__.py` in the project root or in your `wsgi.py`/`asgi.py` files.
{{end}}
{{if eq . "fastapi"}}
#### FastAPI Integration

Find your FastAPI app creation code (usually in `main.py`) and modify it:

```python
from fastapi import FastAPI
from telemetry.opentelemetry_config import configure_opentelemetry, instrument_fastapi_app

# Initialize OpenTelemetry first
configure_opentelemetry()

# Create FastAPI app
app = FastAPI()

# Instrument the FastAPI app
app = instrument_fastapi_app(app)

# Your existing routes and configuration...
```
{{end}}
{{end}}

### 4. Environment Configuration

Add these environment variables to your deployment configuration:

```bash
# OpenTelemetry configuration
OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://your-otel-collector:4318/v1/traces
OTEL_API_KEY=your-api-key-if-needed
SERVICE_VERSION=1.0.0
ENVIRONMENT=production
```

### 5. Project Structure Considerations

- Place the `telemetry/` directory in your project root alongside your main application code
- If your project uses a different structure for configuration modules, adapt the file location accordingly
- Ensure the telemetry module is importable from your main application entry points
- Consider adding `telemetry/__init__.py` if following Python package conventions

### 6. Testing the Implementation

After implementation, verify the instrumentation is working:

1. Start your application
2. Make some requests to trigger traces
3. Check your OpenTelemetry backend/collector for incoming trace data
4. Verify that spans are being created for HTTP requests, database calls, and other instrumented operations

### 7. Additional Notes

- The instrumentation is configured to use OTLP HTTP exporter by default
- Sampling and other advanced configurations can be added to the `configure_opentelemetry()` function
- For manual instrumentation, use the `get_tracer()` function to create custom spans
- Consider adding error handling and logging to the telemetry configuration for production use

## Files to Create/Modify

1. **Create**: `telemetry/opentelemetry_config.py` - Main OpenTelemetry configuration
2. **Create**: `telemetry/__init__.py` - Empty file to make it a Python package
{{range .Instrumentations}}
{{if eq . "flask"}}3. **Modify**: Your Flask app initialization file - Add instrumentation calls{{end}}
{{if eq . "django"}}3. **Modify**: `settings.py` - Add OpenTelemetry initialization{{end}}
{{if eq . "fastapi"}}3. **Modify**: Your FastAPI app initialization file - Add instrumentation calls{{end}}
{{end}}
4. **Update**: Requirements file (`requirements.txt` or `pyproject.toml`) - Add OpenTelemetry dependencies
5. **Update**: Environment configuration - Add OpenTelemetry environment variables

This implementation provides comprehensive OpenTelemetry instrumentation while following Python best practices and allowing for easy configuration and maintenance.
